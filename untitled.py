# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import os
import shutil
import sys
import subprocess
from nn_clm_cen import nn_clm_cen
from practice_unit5_1 import practice_unit5_1
from copyfiles2dir import copyfiles2dir
from practice_unit5_3 import practice_unit5_3
import time
from plot_unit7 import plot_unit7_e1, plot_unit7_e2
from linecache import getline


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(657, 385)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setEnabled(True)
        self.groupBox.setGeometry(QtCore.QRect(70, 10, 511, 101))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(30, 20, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(30, 60, 47, 13))
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(80, 30, 181, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.matrix = QtWidgets.QComboBox(self.groupBox)
        self.matrix.setGeometry(QtCore.QRect(80, 60, 141, 22))
        self.matrix.setObjectName("matrix")
        self.matrix.addItem("")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(290, 30, 47, 13))
        self.label_3.setObjectName("label_3")
        self.times = QtWidgets.QComboBox(self.groupBox)
        self.times.setGeometry(QtCore.QRect(330, 30, 151, 22))
        self.times.setObjectName("times")
        self.times.addItem("")
        self.times.addItem("")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(290, 310, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(70, 130, 511, 171))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.pushButton_22 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_22.setGeometry(QtCore.QRect(80, 40, 101, 23))
        self.pushButton_22.setObjectName("pushButton_22")
        self.label_32 = QtWidgets.QLabel(self.tab_5)
        self.label_32.setGeometry(QtCore.QRect(40, 90, 47, 13))
        self.label_32.setObjectName("label_32")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.tab_5)
        self.lineEdit_14.setGeometry(QtCore.QRect(90, 90, 291, 20))
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.pushButton_23 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_23.setGeometry(QtCore.QRect(400, 90, 75, 23))
        self.pushButton_23.setObjectName("pushButton_23")
        self.pushButton_24 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_24.setGeometry(QtCore.QRect(280, 40, 101, 23))
        self.pushButton_24.setObjectName("pushButton_24")
        self.tabWidget.addTab(self.tab_5, "")
        self.p3_3 = QtWidgets.QWidget()
        self.p3_3.setObjectName("p3_3")
        self.label_4 = QtWidgets.QLabel(self.p3_3)
        self.label_4.setGeometry(QtCore.QRect(60, 40, 41, 16))
        self.label_4.setObjectName("label_4")
        self.comboBox_4 = QtWidgets.QComboBox(self.p3_3)
        self.comboBox_4.setGeometry(QtCore.QRect(110, 40, 201, 22))
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.label_27 = QtWidgets.QLabel(self.p3_3)
        self.label_27.setGeometry(QtCore.QRect(30, 100, 47, 13))
        self.label_27.setObjectName("label_27")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.p3_3)
        self.lineEdit_11.setGeometry(QtCore.QRect(90, 100, 291, 20))
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.pushButton_18 = QtWidgets.QPushButton(self.p3_3)
        self.pushButton_18.setGeometry(QtCore.QRect(400, 100, 75, 23))
        self.pushButton_18.setObjectName("pushButton_18")
        self.pushButton = QtWidgets.QPushButton(self.p3_3)
        self.pushButton.setGeometry(QtCore.QRect(350, 40, 101, 23))
        self.pushButton.setObjectName("pushButton")
        self.comboBox_19 = QtWidgets.QComboBox(self.p3_3)
        self.comboBox_19.setGeometry(QtCore.QRect(110, 40, 201, 22))
        self.comboBox_19.setObjectName("comboBox_19")
        self.comboBox_19.addItem("")
        self.comboBox_19.addItem("")
        self.comboBox_19.addItem("")
        self.comboBox_19.addItem("")
        self.comboBox_19.addItem("")
        self.comboBox_19.addItem("")
        self.comboBox_5 = QtWidgets.QComboBox(self.p3_3)
        self.comboBox_5.setGeometry(QtCore.QRect(110, 40, 201, 22))
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_14 = QtWidgets.QComboBox(self.p3_3)
        self.comboBox_14.setGeometry(QtCore.QRect(110, 40, 201, 22))
        self.comboBox_14.setObjectName("comboBox_14")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.tabWidget.addTab(self.p3_3, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.label_28 = QtWidgets.QLabel(self.tab_3)
        self.label_28.setGeometry(QtCore.QRect(30, 100, 47, 16))
        self.label_28.setObjectName("label_28")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_12.setGeometry(QtCore.QRect(90, 100, 291, 20))
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.pushButton_19 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_19.setGeometry(QtCore.QRect(400, 100, 81, 23))
        self.pushButton_19.setObjectName("pushButton_19")
        self.label_30 = QtWidgets.QLabel(self.tab_3)
        self.label_30.setGeometry(QtCore.QRect(170, 40, 41, 16))
        self.label_30.setObjectName("label_30")
        self.comboBox_16 = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_16.setGeometry(QtCore.QRect(210, 40, 111, 22))
        self.comboBox_16.setObjectName("comboBox_16")
        self.comboBox_16.addItem("")
        self.comboBox_16.addItem("")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.comboBox_17 = QtWidgets.QComboBox(self.tab_4)
        self.comboBox_17.setGeometry(QtCore.QRect(170, 30, 69, 22))
        self.comboBox_17.setObjectName("comboBox_17")
        self.comboBox_17.addItem("")
        self.comboBox_17.addItem("")
        self.label_29 = QtWidgets.QLabel(self.tab_4)
        self.label_29.setGeometry(QtCore.QRect(130, 30, 47, 13))
        self.label_29.setObjectName("label_29")
        self.label_31 = QtWidgets.QLabel(self.tab_4)
        self.label_31.setGeometry(QtCore.QRect(40, 90, 61, 20))
        self.label_31.setObjectName("label_31")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_13.setGeometry(QtCore.QRect(120, 90, 251, 20))
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.pushButton_20 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_20.setGeometry(QtCore.QRect(400, 90, 75, 23))
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_21 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_21.setGeometry(QtCore.QRect(300, 30, 101, 23))
        self.pushButton_21.setObjectName("pushButton_21")
        self.comboBox_18 = QtWidgets.QComboBox(self.tab_4)
        self.comboBox_18.setGeometry(QtCore.QRect(170, 30, 69, 22))
        self.comboBox_18.setObjectName("comboBox_18")
        self.comboBox_18.addItem("")
        self.tabWidget.addTab(self.tab_4, "")
        self.teco_simulation = QtWidgets.QWidget()
        self.teco_simulation.setObjectName("teco_simulation")
        self.label_21 = QtWidgets.QLabel(self.teco_simulation)
        self.label_21.setGeometry(QtCore.QRect(50, 40, 61, 20))
        self.label_21.setObjectName("label_21")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.teco_simulation)
        self.lineEdit_4.setGeometry(QtCore.QRect(120, 40, 251, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_11 = QtWidgets.QPushButton(self.teco_simulation)
        self.pushButton_11.setGeometry(QtCore.QRect(400, 40, 75, 23))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_2 = QtWidgets.QPushButton(self.teco_simulation)
        self.pushButton_2.setGeometry(QtCore.QRect(50, 90, 151, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.teco_simulation)
        self.pushButton_4.setGeometry(QtCore.QRect(300, 90, 151, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.tabWidget.addTab(self.teco_simulation, "")
        self.teco_da = QtWidgets.QWidget()
        self.teco_da.setObjectName("teco_da")
        self.label_22 = QtWidgets.QLabel(self.teco_da)
        self.label_22.setGeometry(QtCore.QRect(50, 40, 61, 20))
        self.label_22.setObjectName("label_22")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.teco_da)
        self.lineEdit_5.setGeometry(QtCore.QRect(120, 40, 251, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.pushButton_12 = QtWidgets.QPushButton(self.teco_da)
        self.pushButton_12.setGeometry(QtCore.QRect(400, 40, 75, 23))
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_6 = QtWidgets.QPushButton(self.teco_da)
        self.pushButton_6.setGeometry(QtCore.QRect(350, 90, 151, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_5 = QtWidgets.QPushButton(self.teco_da)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 90, 151, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_15 = QtWidgets.QPushButton(self.teco_da)
        self.pushButton_15.setGeometry(QtCore.QRect(180, 90, 151, 23))
        self.pushButton_15.setObjectName("pushButton_15")
        self.tabWidget.addTab(self.teco_da, "")
        self.teco_forecasting = QtWidgets.QWidget()
        self.teco_forecasting.setObjectName("teco_forecasting")
        self.pushButton_7 = QtWidgets.QPushButton(self.teco_forecasting)
        self.pushButton_7.setGeometry(QtCore.QRect(400, 10, 75, 23))
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_5 = QtWidgets.QLabel(self.teco_forecasting)
        self.label_5.setGeometry(QtCore.QRect(6, 10, 71, 20))
        self.label_5.setObjectName("label_5")
        self.lineEdit = QtWidgets.QLineEdit(self.teco_forecasting)
        self.lineEdit.setGeometry(QtCore.QRect(90, 10, 291, 20))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.label_6 = QtWidgets.QLabel(self.teco_forecasting)
        self.label_6.setGeometry(QtCore.QRect(190, 40, 101, 20))
        self.label_6.setObjectName("label_6")
        self.dateEdit = QtWidgets.QDateEdit(self.teco_forecasting)
        self.dateEdit.setGeometry(QtCore.QRect(290, 40, 110, 22))
        self.dateEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2011, 1, 2), QtCore.QTime(12, 0, 0)))
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.label_7 = QtWidgets.QLabel(self.teco_forecasting)
        self.label_7.setGeometry(QtCore.QRect(10, 40, 161, 21))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.teco_forecasting)
        self.label_8.setGeometry(QtCore.QRect(10, 70, 81, 16))
        self.label_8.setObjectName("label_8")
        self.comboBox_2 = QtWidgets.QComboBox(self.teco_forecasting)
        self.comboBox_2.setGeometry(QtCore.QRect(100, 70, 69, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label_9 = QtWidgets.QLabel(self.teco_forecasting)
        self.label_9.setGeometry(QtCore.QRect(220, 70, 151, 16))
        self.label_9.setObjectName("label_9")
        self.comboBox_3 = QtWidgets.QComboBox(self.teco_forecasting)
        self.comboBox_3.setGeometry(QtCore.QRect(380, 70, 69, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.label_24 = QtWidgets.QLabel(self.teco_forecasting)
        self.label_24.setGeometry(QtCore.QRect(30, 110, 47, 13))
        self.label_24.setObjectName("label_24")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.teco_forecasting)
        self.lineEdit_8.setGeometry(QtCore.QRect(90, 110, 271, 20))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.pushButton_14 = QtWidgets.QPushButton(self.teco_forecasting)
        self.pushButton_14.setGeometry(QtCore.QRect(384, 110, 101, 23))
        self.pushButton_14.setObjectName("pushButton_14")
        self.tabWidget.addTab(self.teco_forecasting, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label_25 = QtWidgets.QLabel(self.tab)
        self.label_25.setGeometry(QtCore.QRect(30, 60, 47, 13))
        self.label_25.setObjectName("label_25")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_9.setGeometry(QtCore.QRect(80, 60, 281, 20))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.pushButton_16 = QtWidgets.QPushButton(self.tab)
        self.pushButton_16.setGeometry(QtCore.QRect(370, 60, 111, 23))
        self.pushButton_16.setObjectName("pushButton_16")
        self.tabWidget.addTab(self.tab, "")
        self.proda_2 = QtWidgets.QWidget()
        self.proda_2.setObjectName("proda_2")
        self.label_10 = QtWidgets.QLabel(self.proda_2)
        self.label_10.setGeometry(QtCore.QRect(20, 10, 47, 13))
        self.label_10.setObjectName("label_10")
        self.comboBox_6 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_6.setGeometry(QtCore.QRect(10, 30, 69, 22))
        self.comboBox_6.setObjectName("comboBox_6")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.label_11 = QtWidgets.QLabel(self.proda_2)
        self.label_11.setGeometry(QtCore.QRect(110, 10, 51, 16))
        self.label_11.setObjectName("label_11")
        self.comboBox_7 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_7.setGeometry(QtCore.QRect(100, 30, 69, 22))
        self.comboBox_7.setObjectName("comboBox_7")
        self.comboBox_7.addItem("")
        self.comboBox_7.addItem("")
        self.comboBox_7.addItem("")
        self.comboBox_7.addItem("")
        self.comboBox_7.addItem("")
        self.label_12 = QtWidgets.QLabel(self.proda_2)
        self.label_12.setGeometry(QtCore.QRect(210, 10, 161, 16))
        self.label_12.setObjectName("label_12")
        self.comboBox_8 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_8.setGeometry(QtCore.QRect(250, 30, 69, 22))
        self.comboBox_8.setObjectName("comboBox_8")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.label_13 = QtWidgets.QLabel(self.proda_2)
        self.label_13.setGeometry(QtCore.QRect(400, 10, 91, 16))
        self.label_13.setObjectName("label_13")
        self.comboBox_9 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_9.setGeometry(QtCore.QRect(410, 30, 69, 22))
        self.comboBox_9.setObjectName("comboBox_9")
        self.comboBox_9.addItem("")
        self.comboBox_9.addItem("")
        self.comboBox_9.addItem("")
        self.label_14 = QtWidgets.QLabel(self.proda_2)
        self.label_14.setGeometry(QtCore.QRect(10, 60, 71, 16))
        self.label_14.setObjectName("label_14")
        self.comboBox_10 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_10.setGeometry(QtCore.QRect(10, 80, 69, 22))
        self.comboBox_10.setObjectName("comboBox_10")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.label_15 = QtWidgets.QLabel(self.proda_2)
        self.label_15.setGeometry(QtCore.QRect(110, 60, 47, 13))
        self.label_15.setObjectName("label_15")
        self.comboBox_11 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_11.setGeometry(QtCore.QRect(100, 80, 69, 22))
        self.comboBox_11.setObjectName("comboBox_11")
        self.comboBox_11.addItem("")
        self.comboBox_11.addItem("")
        self.comboBox_11.addItem("")
        self.label_16 = QtWidgets.QLabel(self.proda_2)
        self.label_16.setGeometry(QtCore.QRect(260, 60, 41, 16))
        self.label_16.setObjectName("label_16")
        self.comboBox_12 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_12.setGeometry(QtCore.QRect(240, 80, 69, 22))
        self.comboBox_12.setObjectName("comboBox_12")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.label_17 = QtWidgets.QLabel(self.proda_2)
        self.label_17.setGeometry(QtCore.QRect(340, 60, 131, 16))
        self.label_17.setObjectName("label_17")
        self.comboBox_13 = QtWidgets.QComboBox(self.proda_2)
        self.comboBox_13.setGeometry(QtCore.QRect(370, 80, 69, 22))
        self.comboBox_13.setObjectName("comboBox_13")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.label_20 = QtWidgets.QLabel(self.proda_2)
        self.label_20.setGeometry(QtCore.QRect(20, 120, 47, 13))
        self.label_20.setObjectName("label_20")
        self.pushButton_10 = QtWidgets.QPushButton(self.proda_2)
        self.pushButton_10.setGeometry(QtCore.QRect(370, 120, 111, 23))
        self.pushButton_10.setObjectName("pushButton_10")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.proda_2)
        self.lineEdit_6.setGeometry(QtCore.QRect(70, 120, 281, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.tabWidget.addTab(self.proda_2, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_26 = QtWidgets.QLabel(self.tab_2)
        self.label_26.setGeometry(QtCore.QRect(30, 60, 47, 13))
        self.label_26.setObjectName("label_26")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_10.setGeometry(QtCore.QRect(80, 60, 281, 20))
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.pushButton_17 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_17.setGeometry(QtCore.QRect(370, 60, 111, 23))
        self.pushButton_17.setObjectName("pushButton_17")
        self.tabWidget.addTab(self.tab_2, "")
        self.proda_4 = QtWidgets.QWidget()
        self.proda_4.setObjectName("proda_4")
        self.label_18 = QtWidgets.QLabel(self.proda_4)
        self.label_18.setGeometry(QtCore.QRect(10, 20, 31, 16))
        self.label_18.setObjectName("label_18")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.proda_4)
        self.lineEdit_2.setGeometry(QtCore.QRect(50, 20, 261, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_8 = QtWidgets.QPushButton(self.proda_4)
        self.pushButton_8.setGeometry(QtCore.QRect(330, 20, 171, 23))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label_19 = QtWidgets.QLabel(self.proda_4)
        self.label_19.setGeometry(QtCore.QRect(10, 60, 31, 16))
        self.label_19.setObjectName("label_19")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.proda_4)
        self.lineEdit_3.setGeometry(QtCore.QRect(50, 60, 261, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_9 = QtWidgets.QPushButton(self.proda_4)
        self.pushButton_9.setGeometry(QtCore.QRect(330, 60, 171, 23))
        self.pushButton_9.setObjectName("pushButton_9")
        self.label_23 = QtWidgets.QLabel(self.proda_4)
        self.label_23.setGeometry(QtCore.QRect(10, 100, 31, 16))
        self.label_23.setObjectName("label_23")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.proda_4)
        self.lineEdit_7.setGeometry(QtCore.QRect(50, 100, 261, 20))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.pushButton_13 = QtWidgets.QPushButton(self.proda_4)
        self.pushButton_13.setGeometry(QtCore.QRect(330, 100, 171, 23))
        self.pushButton_13.setObjectName("pushButton_13")
        self.tabWidget.addTab(self.proda_4, "")
        self.tabWidget.raise_()
        self.groupBox.raise_()
        self.pushButton_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 657, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Select Task"))
        self.label.setText(_translate("MainWindow", "Unit"))
        self.label_2.setText(_translate("MainWindow", "Exercise"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Select a unit"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Unit 2"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Unit 3"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Unit 4"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Unit 5"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Unit 6"))
        self.comboBox.setItemText(6, _translate("MainWindow", "Unit 7"))
        self.comboBox.setItemText(7, _translate("MainWindow", "Unit 8"))
        self.comboBox.setItemText(8, _translate("MainWindow", "Unit 9"))
        self.comboBox.setItemText(9, _translate("MainWindow", "Unit 10"))
        self.matrix.setItemText(0, _translate("MainWindow", "Select an exercise"))
        self.label_3.setText(_translate("MainWindow", "Times"))
        self.times.setItemText(0, _translate("MainWindow", "100"))
        self.times.setItemText(1, _translate("MainWindow", "1"))
        self.pushButton_3.setText(_translate("MainWindow", "Run Exercise"))
        self.pushButton_22.setText(_translate("MainWindow", "Edit source code"))
        self.label_32.setText(_translate("MainWindow", "Out dir"))
        self.pushButton_23.setText(_translate("MainWindow", "Output Folder"))
        self.pushButton_24.setText(_translate("MainWindow", "Open solution"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Tab 0"))
        self.label_4.setText(_translate("MainWindow", "Select "))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "Default"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "Change initial pool sizes I"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "Change initial pool sizes II"))
        self.comboBox_4.setItemText(3, _translate("MainWindow", "Change carbon input I"))
        self.comboBox_4.setItemText(4, _translate("MainWindow", "Change carbon input II"))
        self.label_27.setText(_translate("MainWindow", "Out dir"))
        self.pushButton_18.setText(_translate("MainWindow", "Output Folder"))
        self.pushButton.setText(_translate("MainWindow", "Open source code"))
        self.comboBox_19.setItemText(0, _translate("MainWindow", "Low foilage turnover"))
        self.comboBox_19.setItemText(1, _translate("MainWindow", "Low passive soil turnover"))
        self.comboBox_19.setItemText(2, _translate("MainWindow", "High allocation to foilage"))
        self.comboBox_19.setItemText(3, _translate("MainWindow", "High allocation to woody"))
        self.comboBox_19.setItemText(4, _translate("MainWindow", "Multiple changes I"))
        self.comboBox_19.setItemText(5, _translate("MainWindow", "Multiple changes II"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "Default ND"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "Default SASU"))
        self.comboBox_5.setItemText(2, _translate("MainWindow", "High C input ND"))
        self.comboBox_5.setItemText(3, _translate("MainWindow", "High C input SASU"))
        self.comboBox_5.setItemText(4, _translate("MainWindow", "High K passive ND"))
        self.comboBox_5.setItemText(5, _translate("MainWindow", "High K passive SASU"))
        self.comboBox_14.setItemText(0, _translate("MainWindow", "Default ND"))
        self.comboBox_14.setItemText(1, _translate("MainWindow", "Default SASU"))
        self.comboBox_14.setItemText(2, _translate("MainWindow", "Nonlinear foilage C with ND"))
        self.comboBox_14.setItemText(3, _translate("MainWindow", "Nonlinear foliage C with SASU"))
        self.comboBox_14.setItemText(4, _translate("MainWindow", "Nonlinear soil C with ND"))
        self.comboBox_14.setItemText(5, _translate("MainWindow", "Nonlinear soil C with SASU"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.p3_3), _translate("MainWindow", "Tab 1"))
        self.label_28.setText(_translate("MainWindow", "Out Dir"))
        self.pushButton_19.setText(_translate("MainWindow", "Output Folder"))
        self.label_30.setText(_translate("MainWindow", "Select"))
        self.comboBox_16.setItemText(0, _translate("MainWindow", "Spatial"))
        self.comboBox_16.setItemText(1, _translate("MainWindow", "Temporal"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Tab 2"))
        self.comboBox_17.setItemText(0, _translate("MainWindow", "ambient"))
        self.comboBox_17.setItemText(1, _translate("MainWindow", "elevated"))
        self.label_29.setText(_translate("MainWindow", "CO2"))
        self.label_31.setText(_translate("MainWindow", "Output Dir"))
        self.pushButton_20.setText(_translate("MainWindow", "Select"))
        self.pushButton_21.setText(_translate("MainWindow", "Open source code"))
        self.comboBox_18.setItemText(0, _translate("MainWindow", "ambient"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Tab 3"))
        self.label_21.setText(_translate("MainWindow", "Output Dir"))
        self.pushButton_11.setText(_translate("MainWindow", "Select"))
        self.pushButton_2.setText(_translate("MainWindow", "Set Initial parameters"))
        self.pushButton_4.setText(_translate("MainWindow", "Set Namelist"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.teco_simulation), _translate("MainWindow", "Tab 4"))
        self.label_22.setText(_translate("MainWindow", "Output Dir"))
        self.pushButton_12.setText(_translate("MainWindow", "Select"))
        self.pushButton_6.setText(_translate("MainWindow", "Set Namelist"))
        self.pushButton_5.setText(_translate("MainWindow", "Set Initial parameters"))
        self.pushButton_15.setText(_translate("MainWindow", "select DA pars"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.teco_da), _translate("MainWindow", "Tab 5"))
        self.pushButton_7.setText(_translate("MainWindow", "Set DA folder"))
        self.label_5.setText(_translate("MainWindow", "Set DA folder"))
        self.label_6.setText(_translate("MainWindow", "Forecast date end:"))
        self.label_7.setText(_translate("MainWindow", "Forecast date start: 01/01/2011"))
        self.label_8.setText(_translate("MainWindow", "Warming (0-9℃)"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "0"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "2.25"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "4.5"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "6.75"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "9"))
        self.label_9.setText(_translate("MainWindow", "CO2 fertilization (380-900 ppm)"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "380"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "900"))
        self.label_24.setText(_translate("MainWindow", "Out Dir"))
        self.pushButton_14.setText(_translate("MainWindow", "Set Output Folder"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.teco_forecasting), _translate("MainWindow", "Tab 6"))
        self.label_25.setText(_translate("MainWindow", "OutDir"))
        self.pushButton_16.setText(_translate("MainWindow", "Set Output Folder"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 7"))
        self.label_10.setText(_translate("MainWindow", "Optimizer"))
        self.comboBox_6.setItemText(0, _translate("MainWindow", "adadelta"))
        self.comboBox_6.setItemText(1, _translate("MainWindow", "adam"))
        self.comboBox_6.setItemText(2, _translate("MainWindow", "RMSprop"))
        self.label_11.setText(_translate("MainWindow", "Epoch Size"))
        self.comboBox_7.setItemText(0, _translate("MainWindow", "100"))
        self.comboBox_7.setItemText(1, _translate("MainWindow", "300"))
        self.comboBox_7.setItemText(2, _translate("MainWindow", "600"))
        self.comboBox_7.setItemText(3, _translate("MainWindow", "900"))
        self.comboBox_7.setItemText(4, _translate("MainWindow", "1200"))
        self.label_12.setText(_translate("MainWindow", "Neurone Number for Each Layer"))
        self.comboBox_8.setItemText(0, _translate("MainWindow", "256"))
        self.comboBox_8.setItemText(1, _translate("MainWindow", "128"))
        self.comboBox_8.setItemText(2, _translate("MainWindow", "512"))
        self.label_13.setText(_translate("MainWindow", "Activation Function"))
        self.comboBox_9.setItemText(0, _translate("MainWindow", "relu"))
        self.comboBox_9.setItemText(1, _translate("MainWindow", "tanh"))
        self.comboBox_9.setItemText(2, _translate("MainWindow", "sigmoid"))
        self.label_14.setText(_translate("MainWindow", "Loss Function"))
        self.comboBox_10.setItemText(0, _translate("MainWindow", "joint_loss"))
        self.comboBox_10.setItemText(1, _translate("MainWindow", "mse"))
        self.label_15.setText(_translate("MainWindow", "Batch Size"))
        self.comboBox_11.setItemText(0, _translate("MainWindow", "64"))
        self.comboBox_11.setItemText(1, _translate("MainWindow", "32"))
        self.comboBox_11.setItemText(2, _translate("MainWindow", "48"))
        self.label_16.setText(_translate("MainWindow", "Layers"))
        self.comboBox_12.setItemText(0, _translate("MainWindow", "4"))
        self.comboBox_12.setItemText(1, _translate("MainWindow", "1"))
        self.comboBox_12.setItemText(2, _translate("MainWindow", "2"))
        self.comboBox_12.setItemText(3, _translate("MainWindow", "3"))
        self.label_17.setText(_translate("MainWindow", "Drop Ratio for Each Layer"))
        self.comboBox_13.setItemText(0, _translate("MainWindow", "0.3"))
        self.comboBox_13.setItemText(1, _translate("MainWindow", "0"))
        self.comboBox_13.setItemText(2, _translate("MainWindow", "0.5"))
        self.label_20.setText(_translate("MainWindow", "OutDir"))
        self.pushButton_10.setText(_translate("MainWindow", "Set Output Folder"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.proda_2), _translate("MainWindow", "Tab 8"))
        self.label_26.setText(_translate("MainWindow", "OutDir"))
        self.pushButton_17.setText(_translate("MainWindow", "Set Output Folder"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 9"))
        self.label_18.setText(_translate("MainWindow", "Set Dir"))
        self.pushButton_8.setText(_translate("MainWindow", "Set Neural Networks Task Folder"))
        self.label_19.setText(_translate("MainWindow", "Set Dir"))
        self.pushButton_9.setText(_translate("MainWindow", "Set One Batch DA Task Floder"))
        self.label_23.setText(_translate("MainWindow", "Set Dir"))
        self.pushButton_13.setText(_translate("MainWindow", "Set Output Folder"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.proda_4), _translate("MainWindow", "Tab 10"))
        self.register()

    def register(self):
        self.da_indir = ""
        self.da_outdir = ""
        self.simulation_outdir = ""
        self.da_indir = ""
        self.forecasting_outdir = ""
        self.proda_task2_outdir = ""
        self.proda_task4_input1 = ""
        self.proda_task4_input2 = ""
        self.proda_task4_outdir = ""
        self.proda_task1_outdir = ""
        self.proda_task3_outdir = ""
        self.trace_bench_outdir = ""
        self.unit_6_outdir = ""
        self.matrix_teco_outdir = ""
        self.comboBox.currentIndexChanged.connect(self.set_tasks_visible)
        self.matrix.currentIndexChanged.connect(self.set_tab_visible)
        self.pushButton_19.clicked.connect(self.config_trace_bench_outdir)
        self.pushButton_2.clicked.connect(self.config_teco_simulation_parameters)
        self.pushButton_4.clicked.connect(self.config_teco_simulation_namelist)
        self.pushButton_5.clicked.connect(self.config_teco_da_parameters)
        self.pushButton_6.clicked.connect(self.config_teco_da_namelist)
        self.pushButton_3.clicked.connect(self.run_model)
        self.pushButton_7.clicked.connect(self.set_da_folder)
        self.pushButton_11.clicked.connect(self.config_teco_simulation_outdir)
        self.pushButton_12.clicked.connect(self.config_teco_da_outdir)
        self.pushButton_14.clicked.connect(self.config_teco_forecasting_outdir)
        self.pushButton_10.clicked.connect(self.config_proda_task2_outdir)
        self.pushButton_13.clicked.connect(self.config_proda_task4_outdir)
        self.pushButton_8.clicked.connect(self.config_proda_task4_input_nn_task)
        self.pushButton_9.clicked.connect(self.config_proda_task4_input_one_batch_task)
        self.pushButton_15.clicked.connect(self.config_teco_select_da_pars)
        self.pushButton_16.clicked.connect(self.config_proda_task1_outdir)
        self.pushButton_17.clicked.connect(self.config_proda_task3_outdir)
        self.pushButton_18.clicked.connect(self.config_matrix_outdir)
        self.pushButton_20.clicked.connect(self.config_unit_6_outdir)
        self.pushButton_21.clicked.connect(self.open_unit_6_source_code_folder)
        self.pushButton.clicked.connect(self.open_unit_3_4_source_code_folder)
        self.pushButton_23.clicked.connect(self.config_unit_2_outdir)
        self.pushButton_22.clicked.connect(self.open_unit_2_ex_2)
        self.pushButton_24.clicked.connect(self.open_unit_2_ex_2_solution)
        self.get_platform()


    def open_unit_6_source_code_folder(self):
        if self.platform == "win32":
            subprocess.Popen(['explorer', ".\\Source_code\\unit_6"])
        else:
            subprocess.Popen(["open", "./Source_code/unit_6/"])


    def open_unit_3_4_source_code_folder(self):
        #if self.comboBox.currentText() == "Unit 3":
        if self.matrix_teco_outdir:
            if self.comboBox.currentText() == "Unit 3":
                base_path = self.matrix_teco_outdir
                path = base_path + "/" + self.config_matrix_unit_3()
                if os.path.exists(path) == False:
                    os.mkdir(path)
                if os.path.exists(path + "/test_p3.py") == False: 
                    shutil.copyfile("./Source_code/unit_3/test_p3.py", path + "/test_p3.py")
                if os.path.exists(path + "/GeneralModel.py") == False: 
                    shutil.copyfile("./Source_code/unit_3/GeneralModel.py", path + "/GeneralModel.py")
                if os.path.exists(path + "/Model.py") == False: 
                    shutil.copyfile("./Source_code/unit_3/Model.py", path + "/Model.py")
                if self.platform == "win32":
                    base_path = self.matrix_teco_outdir
                    path = base_path + "/" + self.config_matrix_unit_3()
                    subprocess.Popen(['Notepad', (self.matrix_teco_outdir + "/{0}/test_p3.py".format(self.config_matrix_unit_3())).replace("/", "\\")])
                else:
                    subprocess.Popen(["open", self.matrix_teco_outdir + "/{0}/test_p3.py".format(self.config_matrix_unit_3())])

            elif self.comboBox.currentText() == "Unit 4":
                base_path = self.matrix_teco_outdir
                path = base_path + "/" + self.config_matrix_unit_4()
                if os.path.exists(path) == False:
                    os.mkdir(path)
                if os.path.exists(path + "/test_p4.py") == False: 
                    shutil.copyfile("./Source_code/unit_4/test_p4.py", path + "/test_p4.py")
                if os.path.exists(path + "/GeneralModel.py") == False: 
                    shutil.copyfile("./Source_code/unit_4/GeneralModel.py", path + "/GeneralModel.py")
                if os.path.exists(path + "/Model.py") == False: 
                    shutil.copyfile("./Source_code/unit_4/Model.py", path + "/Model.py")
                if self.platform == "win32":
                    base_path = self.matrix_teco_outdir
                    path = base_path + "/" + self.config_matrix_unit_4()
                    subprocess.Popen(['Notepad', (self.matrix_teco_outdir + "/{0}/test_p4.py".format(self.config_matrix_unit_4())).replace("/", "\\")])
                else:
                    subprocess.Popen(["open", self.matrix_teco_outdir + "/{0}/test_p4.py".format(self.config_matrix_unit_4())])
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select a folder!")
            msg.setWindowTitle("Error")
            msg.exec_()


    def set_tasks_visible(self):
        if self.comboBox.currentText() == "Select a unit":
            self.matrix.setVisible(True)
            self.matrix.clear()
        
        elif self.comboBox.currentText() == "Unit 2":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "2"])
            self.matrix.setCurrentIndex(0)

        elif self.comboBox.currentText() == "Unit 3":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2"])
            self.matrix.setCurrentIndex(0)

        elif self.comboBox.currentText() == "Unit 4":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2"])
            self.matrix.setCurrentIndex(0)

        elif self.comboBox.currentText() == "Unit 5":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2", "3"])
            self.matrix.setCurrentIndex(0)

        elif self.comboBox.currentText() == "Unit 6":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2"])
            self.matrix.setCurrentIndex(0)

        elif self.comboBox.currentText() == "Unit 7":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2"])
            self.matrix.setCurrentIndex(0)

        elif self.comboBox.currentText() == "Unit 8":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2", "3", "4"])
            self.matrix.setCurrentIndex(0)
        
        elif self.comboBox.currentText() == "Unit 9":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2", "3"])
            self.matrix.setCurrentIndex(0)
        
        elif self.comboBox.currentText() == "Unit 10":
            self.matrix.setVisible(True)
            self.matrix.clear()
            self.matrix.addItems(["Select an exercise", "1", "2", "3", "4"])
            self.matrix.setCurrentIndex(0)

    def set_tab_visible(self):
        self.times.setVisible(False)
        self.label_3.setVisible(False)
        self.pushButton_5.setVisible(True)
        self.pushButton_6.setVisible(True)
        self.pushButton_15.setVisible(True)

        if self.comboBox.currentText() == "Unit 2":
                self.tabWidget.setCurrentIndex(0)

        if self.comboBox.currentText() == "Unit 3":
            if self.matrix.currentText() == "1":
                self.tabWidget.setCurrentIndex(1)
                self.comboBox_4.setVisible(True)
                self.comboBox_19.setVisible(False)
                self.comboBox_5.setVisible(False)
                self.comboBox_14.setVisible(False)
            if self.matrix.currentText() == "2":
                self.tabWidget.setCurrentIndex(1)
                self.comboBox_4.setVisible(False)
                self.comboBox_19.setVisible(True)
                self.comboBox_5.setVisible(False)
                self.comboBox_14.setVisible(False)

        if self.comboBox.currentText() == "Unit 4":
            if self.matrix.currentText() == "1":
                self.tabWidget.setCurrentIndex(1)
                self.comboBox_4.setVisible(False)
                self.comboBox_19.setVisible(False)
                self.comboBox_5.setVisible(True)
                self.comboBox_14.setVisible(False)
            if self.matrix.currentText() == "2":
                self.tabWidget.setCurrentIndex(1)
                self.comboBox_4.setVisible(False)
                self.comboBox_19.setVisible(False)
                self.comboBox_5.setVisible(False)
                self.comboBox_14.setVisible(True)

        elif self.comboBox.currentText() == "Unit 5":
            self.comboBox_16.setVisible(False)
            self.label_30.setVisible(False)
            if self.matrix.currentText() == "1":
                self.tabWidget.setCurrentIndex(2)
            elif self.matrix.currentText() == "2":
                self.tabWidget.setCurrentIndex(2)
                self.comboBox_16.setVisible(True)
                self.label_30.setVisible(True)
            elif self.matrix.currentText() == "3":
                self.tabWidget.setCurrentIndex(2)
            elif self.matrix.currentText() == "4":
                self.tabWidget.setCurrentIndex(2)
        
        elif self.comboBox.currentText() == "Unit 6":
            if self.matrix.currentText() == "1":
                self.tabWidget.setCurrentIndex(3)
                self.comboBox_18.setVisible(False)
                self.comboBox_17.setVisible(True)
            elif self.matrix.currentText() == "2":
                self.tabWidget.setCurrentIndex(3)
                self.comboBox_17.setVisible(False)
                self.comboBox_18.setVisible(True)      

        elif self.comboBox.currentText() == "Unit 7":
            if self.matrix.currentText() == "1":
                self.tabWidget.setCurrentIndex(4)
            elif self.matrix.currentText() == "2":
                self.tabWidget.setCurrentIndex(4)
        
        elif self.comboBox.currentText() == "Unit 8":
            #if self.matrix.currentText() == "1":
            self.tabWidget.setCurrentIndex(5)
            self.pushButton_5.setVisible(False)
            self.pushButton_6.setVisible(False)
            self.pushButton_15.setVisible(False)

        elif self.comboBox.currentText() == "Unit 9":
            if self.matrix.currentText() == "1":
                self.tabWidget.setCurrentIndex(5)
            elif self.matrix.currentText() == "2":
                self.times.setVisible(True)
                self.label_3.setVisible(True)
                self.tabWidget.setCurrentIndex(6)
            elif self.matrix.currentText() == "3":
                self.tabWidget.setCurrentIndex(6)

        elif self.comboBox.currentText() == "Unit 10":
            if self.matrix.currentText() == "1":
                self.tabWidget.setCurrentIndex(7)
            if self.matrix.currentText() == "2":
                self.tabWidget.setCurrentIndex(8)
            if self.matrix.currentText() == "3":
                self.tabWidget.setCurrentIndex(9)
            if self.matrix.currentText() == "4":
                self.tabWidget.setCurrentIndex(10)

    def config_matrix_unit_3(self):
        if self.matrix.currentText() == "1":
            return self.comboBox_4.currentText()
        else:
            return self.comboBox_19.currentText()


    def config_matrix_unit_4(self):
        if self.matrix.currentText() == "1":
            return self.comboBox_5.currentText()
        else:
            return self.comboBox_14.currentText()

    def config_unit_2_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.unit_2_outdir = out_dir
            self.lineEdit_14.setText(out_dir)

    def config_matrix_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.matrix_teco_outdir = out_dir
            self.lineEdit_11.setText(out_dir)
            if self.comboBox.currentText() == "Unit 3":
                base_path = self.matrix_teco_outdir
                path = base_path + "/" + self.config_matrix_unit_3()
                if os.path.exists(path) == False:
                    os.mkdir(path)
                if os.path.exists(path + "/test_p3.py") == False: 
                    shutil.copyfile("./Source_code/unit_3/test_p3.py", path + "/test_p3.py")
                if os.path.exists(path + "/GeneralModel.py") == False: 
                    shutil.copyfile("./Source_code/unit_3/GeneralModel.py", path + "/GeneralModel.py")
                if os.path.exists(path + "/Model.py") == False: 
                    shutil.copyfile("./Source_code/unit_3/Model.py", path + "/Model.py")
            elif self.comboBox.currentText() == "Unit 4":
                base_path = self.matrix_teco_outdir
                path = base_path + "/" + self.config_matrix_unit_4()
                if os.path.exists(path) == False:
                    os.mkdir(path)
                if os.path.exists(path + "/test_p4.py") == False: 
                    shutil.copyfile("./Source_code/unit_4/test_p4.py", path + "/test_p4.py")
                if os.path.exists(path + "/GeneralModel.py") == False: 
                    shutil.copyfile("./Source_code/unit_4/GeneralModel.py", path + "/GeneralModel.py")
                if os.path.exists(path + "/Model.py") == False: 
                    shutil.copyfile("./Source_code/unit_4/Model.py", path + "/Model.py")

    def config_unit_6_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.unit_6_outdir = out_dir
            self.lineEdit_13.setText(out_dir)


    def config_teco_simulation_parameters(self):
        if self.simulation_outdir:
            if self.platform == "win32":
                os.startfile(self.simulation_outdir + "/SPRUCE_pars.txt")
            else:
                subprocess.call(["open", self.simulation_outdir + "/SPRUCE_pars.txt"])
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select a folder!")
            msg.setWindowTitle("Error")
            msg.exec_()


    def config_teco_simulation_namelist(self):
        if self.simulation_outdir:
            if self.platform == "win32":
                os.startfile(self.simulation_outdir + "/teco_workshop_simu.txt")
            else:
                subprocess.call(["open", self.simulation_outdir + "/teco_workshop_simu.txt"])
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select a folder!")
            msg.setWindowTitle("Error")
            msg.exec_()


    def config_teco_da_parameters(self):
        if self.da_outdir:
            if self.platform == "win32":
                os.startfile(self.da_outdir + "/SPRUCE_pars.txt")
            else:
                subprocess.call(["open", self.da_outdir + "/SPRUCE_pars.txt"])
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select a folder!")
            msg.setWindowTitle("Error")
            msg.exec_()


    def config_teco_select_da_pars(self):
        if self.da_outdir:
            if self.platform == "win32":
                os.startfile(self.da_outdir + "/SPRUCE_da_pars.txt")
            else:
                subprocess.call(["open", self.da_outdir + "/SPRUCE_da_pars.txt"])
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select a folder!")
            msg.setWindowTitle("Error")
            msg.exec_()


    def config_teco_da_namelist(self):
        if self.da_outdir:
            os.startfile(self.da_outdir + "/teco_workshop_da_no_obs.txt")
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select a folder!")
            msg.setWindowTitle("Error")
            msg.exec_()


    def config_teco_simulation_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.simulation_outdir = out_dir
            shutil.copyfile("./Source_code/TECO_2.3/input/SPRUCE_pars.txt", self.simulation_outdir + "/SPRUCE_pars.txt")
            shutil.copyfile("./Source_code/TECO_2.3/input/SPRUCE_da_pars.txt",
                            self.simulation_outdir + "/SPRUCE_da_pars.txt")
            shutil.copyfile("./Source_code/TECO_2.3/workshop_nml/teco_workshop_simu.txt",
                            self.simulation_outdir + "/teco_workshop_simu.txt")
            shutil.copyfile("./Source_code/TECO_2.3/workshop_nml/teco_workshop_da_cflux_cpool.txt",
                            self.simulation_outdir + "/teco_workshop_da_cflux_cpool.txt")

            self.lineEdit_4.setText(out_dir)


    def config_teco_da_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.da_outdir = out_dir
            self.lineEdit_5.setText(out_dir)
            if self.comboBox.currentText() != "Unit 8":
                shutil.copyfile("./Source_code/TECO_2.3/input/SPRUCE_pars.txt", self.da_outdir + "/SPRUCE_pars.txt")
                shutil.copyfile("./Source_code/TECO_2.3/input/SPRUCE_da_pars.txt",
                                self.da_outdir + "/SPRUCE_da_pars.txt")
                shutil.copyfile("./Source_code/TECO_2.3/workshop_nml/teco_workshop_da_no_obs.txt",
                                self.da_outdir + "/teco_workshop_da_no_obs.txt")


    def config_teco_forecasting_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.forecasting_outdir = out_dir
            self.lineEdit_8.setText(out_dir)


    def config_proda_task2_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.proda_task2_outdir = out_dir
            self.lineEdit_6.setText(out_dir)


    def config_proda_task4_outdir(self):
        out_dir = QFileDialog.getExistingDirectory()
        if out_dir:
            self.proda_task4_outdir = out_dir
            self.lineEdit_7.setText(out_dir)


    def config_proda_task4_input_nn_task(self):
        in_dir = QFileDialog.getExistingDirectory()
        if in_dir:
            self.proda_task4_input1 = in_dir
            self.lineEdit_2.setText(in_dir)


    def config_proda_task4_input_one_batch_task(self):
        in_dir = QFileDialog.getExistingDirectory()
        if in_dir:
            self.proda_task4_input2 = in_dir
            self.lineEdit_3.setText(in_dir)


    def set_da_folder(self):
        indir = QFileDialog.getExistingDirectory()
        if indir:
            self.lineEdit.setText(indir)
            self.da_indir = indir


    def config_proda_task1_outdir(self):
        outdir = QFileDialog.getExistingDirectory()
        if outdir:
            self.lineEdit_9.setText(outdir)
        self.proda_task1_outdir = outdir


    def config_proda_task3_outdir(self):
        outdir = QFileDialog.getExistingDirectory()
        if outdir:
            self.lineEdit_10.setText(outdir)
        self.proda_task3_outdir = outdir

    def config_trace_bench_outdir(self):
        outdir = QFileDialog.getExistingDirectory()
        if outdir:
            self.lineEdit_12.setText(outdir)
        self.trace_bench_outdir = outdir

    def open_unit_2_ex_2(self):
        if self.platform == "win32":
            subprocess.Popen(['Notepad', ".\\Source_code\\unit_2\\test_p2.py"])
        else:
            subprocess.Popen(["open", "./Source_code/unit_6/test_p2.py"])

    def open_unit_2_ex_2_solution(self):
        if self.platform == "win32":
            subprocess.Popen(['Notepad', ".\\Source_code\\unit_2\\test_p2_key.py"])
        else:
            subprocess.Popen(["open", "./Source_code/unit_6/test_p2_key.py"])

    def run_model(self):
        os.chdir(os.getcwd())
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText("Task submitted!")
        msg.setWindowTitle("Info")
        msg.exec_()
        if self.comboBox.currentText() == "Unit 2":
            res = 0
            if self.unit_2_outdir:
                if self.platform == "win32":
                    cmd = "python Source_code/unit_2/test_p2.py {0}".format("\"" + self.unit_2_outdir + "\"")
                else:
                    cmd = "python3 Source_code/unit_2/test_p2.py {0}".format("\"" + self.unit_2_outdir + "\"")
                res = os.system(cmd)
                if res == 0:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Finished!")
                    msg.setWindowTitle("Info")
                    msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Error, Check source code!")
                    msg.setWindowTitle("Error")
                    msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Please select a folder!")
                msg.setWindowTitle("Error")
                msg.exec_()

        elif self.comboBox.currentText() == "Unit 3":
            res = 1
            cmd = ""
            if self.matrix_teco_outdir:
                base_path = self.matrix_teco_outdir
                path = base_path + "/" + self.config_matrix_unit_3()
                if self.platform == "win32":
                    cmd = "python {0} {1}".format("\""+ path + "/test_p3.py"+"\"", "\"" + path + "\"")
                else:
                    cmd = "python3 {0} {1}".format("\""+ path + "/test_p3.py"+"\"", "\"" + path + "\"")

                res = os.system(cmd)

                if res == 0:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Finished!")
                    msg.setWindowTitle("Info")
                    msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Error, Check source code!")
                    msg.setWindowTitle("Error")
                    msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Please select a folder!")
                msg.setWindowTitle("Error")
                msg.exec_()

        elif self.comboBox.currentText() == "Unit 4":
            res = 1
            cmd = ""
            if self.matrix_teco_outdir:
                base_path = self.matrix_teco_outdir
                path = base_path + "/" + self.config_matrix_unit_4()
                if self.platform == "win32":
                    cmd = "python {0} {1}".format("\""+ path + "/test_p4.py"+"\"", "\"" + path + "\"")
                else:
                    cmd = "python3 {0} {1}".format("\""+ path + "/test_p4.py"+"\"", "\"" + path + "\"")

                res = os.system(cmd)

                if res == 0:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Finished!")
                    msg.setWindowTitle("Info")
                    msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Error, Check source code!")
                    msg.setWindowTitle("Error")
                    msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Please select a folder!")
                msg.setWindowTitle("Error")
                msg.exec_()

        elif self.comboBox.currentText() == "Unit 5":
            if self.trace_bench_outdir:
                res = 1
                if self.matrix.currentText() == "1":
                    res = practice_unit5_1(self.trace_bench_outdir)
                elif self.matrix.currentText() == "2":
                    time.sleep(10)
                    if self.comboBox_16.currentText() == "Spatial":
                        source_folder = "./Source_code/traceability/practice_2/results/output/spatial/"
                        res = copyfiles2dir(source_folder, self.trace_bench_outdir)
                    else:
                        source_folder = "./Source_code/traceability/practice_2/results/output/temporal/"
                        res = copyfiles2dir(source_folder, self.trace_bench_outdir)
                elif self.matrix.currentText() == "3":
                    res = practice_unit5_3(self.trace_bench_outdir)
                elif self.matrix.currentText() == "4":
                    res = 1
                    pass

                if res == 0:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Finished!")
                    msg.setWindowTitle("Info")
                    msg.exec_()

                if res == 1:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Not implemented!")
                    msg.setWindowTitle("Info")
                    msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Please select a folder!")
                msg.setWindowTitle("Error")
                msg.exec_()

        elif self.comboBox.currentText() == "Unit 6":
            if self.unit_6_outdir != "":
                if os.path.exists(self.unit_6_outdir + "/practice_1_ambient") == False:
                    os.mkdir(self.unit_6_outdir + "/practice_1_ambient/")
                    os.mkdir(self.unit_6_outdir + "/practice_1_ambient/figures/")
                if os.path.exists(self.unit_6_outdir + "/practice_1_elevated") == False:
                    os.mkdir(self.unit_6_outdir + "/practice_1_elevated/")
                    os.mkdir(self.unit_6_outdir + "/practice_1_elevated/figures")
                if os.path.exists(self.unit_6_outdir + "/practice_2_ambient") == False:
                    os.mkdir(self.unit_6_outdir + "/practice_2_ambient/")
                    os.mkdir(self.unit_6_outdir + "/practice_2_ambient/figures/")
                res = 1
                model_folder = "./Source_code/unit_6/"
                cmd = ""
                cmd_r = ""
                if self.matrix.currentText() == "1":
                    if self.comboBox_17.currentText() == "ambient":
                        if self.platform == "win32":
                            cmd = "python Source_code/unit_6/Probabilistic_inversion.py 1 ParamRange.txt {1}{0}{1}".format(
                                self.unit_6_outdir + "/practice_1_ambient/", "\"")
                        else:
                            cmd = "python3 Source_code/unit_6/Probabilistic_inversion.py 1 ParamRange.txt {1}{0}{1}".format(
                                self.unit_6_outdir + "/practice_1_ambient/", "\"")
                        cmd_r = "Rscript Source_code/unit_6/FigurePlot.R 1 ParamRange.txt {1}{0}{1}".format(
                            self.unit_6_outdir + "/practice_1_ambient/", "\"")
                    else:
                        if self.platform == "win32":
                            cmd = "python Source_code/unit_6/Probabilistic_inversion.py 2 ParamRange.txt {1}{0}{1}".format(
                                self.unit_6_outdir + "/practice_1_elevated/", "\"")
                        else:
                            cmd = "python3 Source_code/unit_6/Probabilistic_inversion.py 2 ParamRange.txt {1}{0}{1}".format(
                                self.unit_6_outdir + "/practice_1_elevated/", "\"")
                        cmd_r = "Rscript Source_code/unit_6/FigurePlot.R 2 ParamRange.txt {1}{0}{1}".format(
                            self.unit_6_outdir + "/practice_1_elevated/", "\"")

                elif self.matrix.currentText() == "2":
                    if self.platform == "win32":
                        cmd = "python Source_code/unit_6/Probabilistic_inversion.py 1 newParamRange.txt {1}{0}{1}".format(
                            self.unit_6_outdir + "/practice_2_ambient/", "\"")
                    else:
                        cmd = "python3 Source_code/unit_6/Probabilistic_inversion.py 1 newParamRange.txt {1}{0}{1}".format(
                            self.unit_6_outdir + "/practice_2_ambient/", "\"")
                    cmd_r = "Rscript Source_code/unit_6/FigurePlot.R 1 newParamRange.txt {1}{0}{1}".format(
                        self.unit_6_outdir + "/practice_2_ambient/", "\"")

                res = os.system(cmd)
                res = os.system(cmd_r)

                if res == 0:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Finished!")
                    msg.setWindowTitle("Info")
                    msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Please select a folder!")
                msg.setWindowTitle("Error")
                msg.exec_()

        elif self.comboBox.currentText() == "Unit 7":
            model_folder = "./Source_code/TECO_2.3/"
            if self.matrix.currentText() == "1":
                if self.simulation_outdir:

                    cmd_pars = "{0}/teco_workshop_{1}.txt{7} {0}/SPRUCE_pars.txt{7} {0}/SPRUCE_da_pars.txt{7} " \
                               "{2}/input/SPRUCE_forcing_2011_{3}.txt {0}/simulation/{7} " \
                               "{2}/input/SPRUCE_cflux.txt {2}/input/SPRUCE_cpool.txt {2}/input/SPRUCE_ch4.txt {4} {5} {6}".format(
                        "\"" + self.simulation_outdir, "simu", model_folder, "2016", "0", "380", "100", "\""
                    )

                    if self.platform == "win32":
                        res = os.system(".\Source_code\TECO_2.3\TECO_2.3.exe {0}".format(cmd_pars))
                    else:
                        res = os.system(model_folder + "TECO_2.3.exe {0}".format(cmd_pars))

                    res = plot_unit7_e1("./Source_code/TECO_2.3/input/", self.simulation_outdir + "/simulation/")

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()

                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()
            elif self.matrix.currentText() == "2":
                if self.simulation_outdir:
                    if os.path.exists(self.simulation_outdir + "/DA/") == False:
                        os.mkdir(self.simulation_outdir + "/DA/")
                    if os.path.exists(self.simulation_outdir + "/forecasting/") == False:
                        os.mkdir(self.simulation_outdir + "/forecasting/")
                    cmd_pars = "{0}/teco_workshop_{1}.txt{7} {0}/SPRUCE_pars.txt{7} {0}/SPRUCE_da_pars.txt{7} " \
                               "{2}/input/SPRUCE_forcing_2011_{3}.txt {0}/DA/{7} " \
                               "{2}/input/SPRUCE_cflux.txt {2}/input/SPRUCE_cpool.txt {2}/input/SPRUCE_ch4.txt {4} {5} {6}".format(
                        "\"" + self.simulation_outdir, "da_cflux_cpool", model_folder, "2016", "0", "380", "100", "\""
                    )
                    if self.platform == "win32":
                        res = os.system(".\Source_code\TECO_2.3\TECO_2.3.exe {0}".format(cmd_pars))
                    else:
                        res = os.system(model_folder + "TECO_2.3.exe {0}".format(cmd_pars))

                    shutil.copyfile(self.simulation_outdir + "/SPRUCE_pars.txt",
                                    self.simulation_outdir + "/DA/SPRUCE_pars.txt")
                    shutil.copyfile(self.simulation_outdir + "/SPRUCE_da_pars.txt",
                                    self.simulation_outdir + "/DA/SPRUCE_da_pars.txt")
                    shutil.copyfile("./Source_code/TECO_2.3/workshop_nml/teco_workshop_forecasting.txt",
                                    self.simulation_outdir + "/teco_workshop_forecasting.txt")
                    shutil.copyfile(self.simulation_outdir + "/DA/Paraest.txt", self.simulation_outdir + "/forecasting/Paraest_example.txt")
                    
                    cmd_pars = "{0}/teco_workshop_{1}.txt{7} {0}/SPRUCE_pars.txt{7} {0}/SPRUCE_da_pars.txt{7} " \
                               "{2}/input/SPRUCE_forcing_2011_{3}.txt {0}/forecasting/{7} " \
                               "{2}/input/SPRUCE_cflux.txt {2}/input/SPRUCE_cpool.txt {2}/input/SPRUCE_ch4.txt {4} {5} {6}".format(
                        "\"" + self.simulation_outdir, "forecasting", model_folder, "2016",
                        "0",
                        "380",
                        "100", "\""
                    )
                    if self.platform == "win32":
                        res = os.system(".\Source_code\TECO_2.3\TECO_2.3.exe {0}".format(cmd_pars))
                    else:
                        res = os.system(model_folder + "TECO_2.3.exe {0}".format(cmd_pars))

                    year_ticks = [1, 365, 365*2, 365*3, 365*4, 365*5, 365*6]
                    year_names = [2011, 2012, 2013, 2014, 2015, 2016, 2017]
                    
                    res = plot_unit7_e2(model_folder, self.simulation_outdir, year_ticks, year_names, 1)
                    
                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

        elif self.comboBox.currentText() == "Unit 8":
            model_folder = "./Source_code/TECO_2.3/"
            if self.matrix.currentText() == "1":
                res = 1
                if self.da_outdir != "":
                    
                    shutil.copyfile("./Source_code/TECO_2.3/DA_with_no_obs.zip",
                                    self.da_outdir + "/DA_with_no_obs.zip")
                    
                    res = 0
                    
                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()

                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

            elif self.matrix.currentText() == "2":
                res = 1
                if self.da_outdir != "":
                    
                    shutil.copyfile("./Source_code/TECO_2.3/DA_with_cpools.zip",
                                    self.da_outdir + "/DA_with_cpools.zip")
                    
                    res = 0

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()

                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

            elif self.matrix.currentText() == "3":
                res = 1
                if self.da_outdir != "":
                    
                    shutil.copyfile("./Source_code/TECO_2.3/DA_with_cfluxes.zip",
                                    self.da_outdir + "/DA_with_cfluxes.zip")

                    res = 0
                    
                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()

                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

            elif self.matrix.currentText() == "4":
                res = 1
                if self.da_outdir != "":
                    
                    shutil.copyfile("./Source_code/TECO_2.3/DA_with_cpools_and_cfluxes.zip",
                                    self.da_outdir + "/DA_with_cpools_and_cfluxes.zip")
                    
                    res = 0

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()

                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()
                   
        elif self.comboBox.currentText() == "Unit 9":
            model_folder = "./Source_code/TECO_2.3/"
            if self.matrix.currentText() == "1":
                if self.da_outdir:
                    if os.path.exists(self.da_outdir + "/DA/") == False:
                        os.mkdir(self.da_outdir + "/DA/")
                    if os.path.exists(self.da_outdir + "/forecasting/") == False:
                        os.mkdir(self.da_outdir + "/forecasting/")

                    cmd_pars = "{0}/teco_workshop_{1}.txt{7} {0}/SPRUCE_pars.txt{7} {0}/SPRUCE_da_pars.txt{7} " \
                               "{2}/input/SPRUCE_forcing_2011_{3}.txt {0}/DA/{7} " \
                               "{2}/input/SPRUCE_cflux.txt {2}/input/SPRUCE_cpool.txt {2}/input/SPRUCE_ch4.txt {4} {5} {6}".format(
                        "\"" + self.da_outdir, "da_no_obs", model_folder, "2016", "0", "380", "100", "\""
                    )
                    if self.platform == "win32":
                        res = os.system(".\Source_code\TECO_2.3\TECO_2.3.exe {0}".format(cmd_pars))
                    else:
                        res = os.system(model_folder + "TECO_2.3.exe {0}".format(cmd_pars))

                    shutil.copyfile(self.da_outdir + "/SPRUCE_pars.txt",
                                    self.da_outdir + "/DA/SPRUCE_pars.txt")
                    shutil.copyfile(self.da_outdir + "/SPRUCE_da_pars.txt",
                                    self.da_outdir + "/DA/SPRUCE_da_pars.txt")
                    shutil.copyfile("./Source_code/TECO_2.3/workshop_nml/teco_workshop_forecasting.txt",
                                    self.da_outdir + "/teco_workshop_forecasting.txt")
                    shutil.copyfile(self.da_outdir + "/DA/Paraest.txt", self.da_outdir + "/forecasting/Paraest_example.txt")
                    
                    cmd_pars = "{0}/teco_workshop_{1}.txt{7} {0}/SPRUCE_pars.txt{7} {0}/SPRUCE_da_pars.txt{7} " \
                               "{2}/input/SPRUCE_forcing_2011_{3}.txt {0}/forecasting/{7} " \
                               "{2}/input/SPRUCE_cflux.txt {2}/input/SPRUCE_cpool.txt {2}/input/SPRUCE_ch4.txt {4} {5} {6}".format(
                        "\"" + self.da_outdir, "forecasting", model_folder, "2024",
                        "0",
                        "380",
                        "100", "\""
                    )
                    if self.platform == "win32":
                        res = os.system(".\Source_code\TECO_2.3\TECO_2.3.exe {0}".format(cmd_pars))
                    else:
                        res = os.system(model_folder + "TECO_2.3.exe {0}".format(cmd_pars))
                    
                    year_ticks = [1, 365, 365*2, 365*3, 365*4, 365*5, 365*6, 365*7, 365*8, 365*9, 365*10, 365*11, 365*12, 365*13]
                    year_names = [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]

                    res = plot_unit7_e2(model_folder, self.da_outdir, year_ticks, year_names, 1)
                    
                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

            elif self.matrix.currentText() == "2":
                if os.path.exists(self.forecasting_outdir + "/forecasting/") == False:
                        os.mkdir(self.forecasting_outdir + "/forecasting/")
                if self.forecasting_outdir and self.da_indir:
                    shutil.copyfile(self.da_indir + "/SPRUCE_pars.txt",
                                    self.forecasting_outdir + "/SPRUCE_pars.txt")
                    shutil.copyfile(self.da_indir + "/SPRUCE_da_pars.txt",
                                    self.forecasting_outdir + "/SPRUCE_da_pars.txt")
                    shutil.copyfile("./Source_code/TECO_2.3/workshop_nml/teco_workshop_forecasting.txt",
                                    self.forecasting_outdir + "/teco_workshop_forecasting.txt")
                    shutil.copyfile(self.da_indir + "/Paraest.txt", self.forecasting_outdir + "/forecasting/Paraest_example.txt")
                    # os.mkdir(self.forecasting_outdir + "/output")
                    cmd_pars = "{0}/teco_workshop_{1}.txt{7} {0}/SPRUCE_pars.txt{7} {0}/SPRUCE_da_pars.txt{7} " \
                               "{2}/input/SPRUCE_forcing_2011_{3}.txt {0}/forecasting/{7} " \
                               "{2}/input/SPRUCE_cflux.txt {2}/input/SPRUCE_cpool.txt {2}/input/SPRUCE_ch4.txt {4} {5} {6}".format(
                        "\"" + self.forecasting_outdir, "forecasting", model_folder, "2024",
                        "0",
                        "380",
                        self.times.currentText(), "\""
                    )
                    if self.platform == "win32":
                        res = os.system(".\Source_code\TECO_2.3\TECO_2.3.exe {0}".format(cmd_pars))
                    else:
                        res = os.system(model_folder + "TECO_2.3.exe {0}".format(cmd_pars))

                    year_ticks = [1, 365, 365*2, 365*3, 365*4, 365*5, 365*6, 365*7, 365*8, 365*9, 365*10, 365*11, 365*12, 365*13]
                    year_names = [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]

                    res = plot_unit7_e2(model_folder, self.forecasting_outdir, year_ticks, year_names, 0, int(self.times.currentText()))

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

            elif self.matrix.currentText() == "3":
                if os.path.exists(self.da_outdir + "/forecasting/") == False:
                        os.mkdir(self.da_outdir + "/forecasting/")
                if self.forecasting_outdir and self.da_indir:
                    shutil.copyfile(self.da_indir + "/SPRUCE_pars.txt",
                                    self.forecasting_outdir + "/SPRUCE_pars.txt")
                    shutil.copyfile(self.da_indir + "/SPRUCE_da_pars.txt",
                                    self.forecasting_outdir + "/SPRUCE_da_pars.txt")
                    shutil.copyfile("./Source_code/TECO_2.3/workshop_nml/teco_workshop_forecasting.txt",
                                    self.forecasting_outdir + "/teco_workshop_forecasting.txt")
                    shutil.copyfile(self.da_indir + "/Paraest.txt", self.forecasting_outdir + "/forecasting/Paraest_example.txt")
                    # os.mkdir(self.forecasting_outdir + "/output")
                    cmd_pars = "{0}/teco_workshop_{1}.txt{7} {0}/SPRUCE_pars.txt{7} {0}/SPRUCE_da_pars.txt{7} " \
                               "{2}/input/SPRUCE_forcing_2011_{3}.txt {0}/forecasting/{7} " \
                               "{2}/input/SPRUCE_cflux.txt {2}/input/SPRUCE_cpool.txt {2}/input/SPRUCE_ch4.txt {4} {5} {6}".format(
                        "\"" + self.forecasting_outdir, "forecasting", model_folder, "2024",
                        self.comboBox_2.currentText(),
                        self.comboBox_3.currentText(),
                        "100", "\""
                    )
                    if self.platform == "win32":
                        res = os.system(".\Source_code\TECO_2.3\TECO_2.3.exe {0}".format(cmd_pars))
                    else:
                        res = os.system(model_folder + "TECO_2.3.exe {0}".format(cmd_pars))

                    year_ticks = [1, 365, 365*2, 365*3, 365*4, 365*5, 365*6, 365*7, 365*8, 365*9, 365*10, 365*11, 365*12, 365*13]
                    year_names = [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]

                    res = plot_unit7_e2(model_folder, self.forecasting_outdir, year_ticks, year_names, 0)

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

        elif self.comboBox.currentText() == "Unit 10":
            model_folder = "./Source_code/proda/"
            if self.matrix.currentText() == "1":

                if self.proda_task1_outdir:
                    if os.path.exists(self.proda_task1_outdir + "/output_data/") == False:
                        os.mkdir(self.proda_task1_outdir + "/output_data/")
                    
                    nn_clm_cen(model_folder, self.proda_task1_outdir + "/", "1", arch = self.platform)

                    cmd_pars = "1 {0}/ {1}{2}".format(model_folder, "\"" + self.proda_task1_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/NN_Indi_MAP_Project_CLM_CEN.R {0}".format(cmd_pars))
                    cmd_pars = "{0}/ {1}{2}".format(model_folder, "\"" + self.proda_task1_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/nn_para_map.R {0}".format(cmd_pars))

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

            elif self.matrix.currentText() == "2":

                if self.proda_task2_outdir:
                    if os.path.exists(self.proda_task2_outdir + "/output_data/") == False:
                        os.mkdir(self.proda_task2_outdir + "/output_data/")
                    
                    nn_clm_cen(model_folder, self.proda_task2_outdir + "/", "0", self.comboBox_10.currentText(),
                               self.comboBox_6.currentText(), self.comboBox_11.currentText(),
                               self.comboBox_7.currentText(),
                               self.comboBox_12.currentText(), self.comboBox_8.currentText(),
                               self.comboBox_13.currentText(),
                               self.comboBox_9.currentText(),
                               arch = self.platform
                               )

                    cmd_pars = "1 {0}/ {1}{2}".format(model_folder, "\"" + self.proda_task2_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/NN_Indi_MAP_Project_CLM_CEN.R {0}".format(cmd_pars))
                    cmd_pars = "{0}/ {1}{2}".format(model_folder, "\"" + self.proda_task2_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/nn_para_map.R {0}".format(cmd_pars))

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

            elif self.matrix.currentText() == "3":

                if self.proda_task3_outdir:
                    if os.path.exists(self.proda_task3_outdir + "/output_data/") == False:
                        os.mkdir(self.proda_task3_outdir + "/output_data/")
                    cmd_pars = "{0}/ {1}{2}".format(model_folder, "\"" + self.proda_task3_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/One_Batch_DA.R {0}".format(cmd_pars))

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()
            else:

                if self.proda_task4_input1 and self.proda_task4_input2 and self.proda_task4_outdir:
                    if os.path.exists(self.proda_task4_outdir + "/output_data/") == False:
                        os.mkdir(self.proda_task4_outdir + "/output_data/")
                    self.copy_task_result(self.proda_task4_input1 + "/output_data",
                                          self.proda_task4_outdir + "/output_data")
                    self.copy_task_result(self.proda_task4_input2 + "/output_data",
                                          self.proda_task4_outdir + "/output_data")

                    cmd_pars = "1 {0}/ {1}{2}".format(model_folder, "\"" + self.proda_task4_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/NN_Indi_MAP_Project_CLM_CEN.R {0}".format(cmd_pars))

                    cmd_pars = "2 {0}/ {1}{2}".format(model_folder, "\"" + self.proda_task4_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/NN_Indi_MAP_Project_CLM_CEN.R {0}".format(cmd_pars))

                    cmd_pars = "0 {0}/ {1}{2}".format(model_folder, "\"" + self.proda_task4_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/Global_Projection_NN_CLM_CEN.R {0}".format(cmd_pars))

                    cmd_pars = "1 {0}/ {1}{2}".format(model_folder, "\"" + self.proda_task4_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/Global_Projection_NN_CLM_CEN.R {0}".format(cmd_pars))

                    cmd_pars = "{0}/ {1}{2}".format(model_folder, "\"" + self.proda_task4_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/Different_Method_obs_vs_mod.R {0}".format(cmd_pars))

                    cmd_pars = "{0}{1}".format("\"" + self.proda_task4_outdir + "/", "\"")
                    res = os.system("Rscript ./Source_code/proda/different_method_soil_map.R {0}".format(cmd_pars))

                    if res == 0:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Information)
                        msg.setText("Finished!")
                        msg.setWindowTitle("Info")
                        msg.exec_()
                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Please select a folder!")
                    msg.setWindowTitle("Error")
                    msg.exec_()

    def get_platform(self):
        self.platform = sys.platform


    def copy_task_result(self, source_path, target_path):
        for root, dirs, files in os.walk(source_path):
            for file in files:
                src_file = os.path.join(root, file)
                shutil.copy(src_file, target_path)