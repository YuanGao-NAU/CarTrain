glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
case1301.df<-Sleuth3::case1301
case1301TCR.lm<- lm(log(Cover/(100-Cover)) ~ Block + Treat, data=case1301.df)
#case1301TCR.lm<- update(case1301TC.lm,. ~ . - Block:Treat)
levels(case1301.df$Treat)
a<-8
b<-6
Ca<-rep(0,(a-1))
Cb<-c(0,-1,1,1,-1)
Cmat<- cbind(0,Ca,Cb)
d<-0
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
case1301.df$Treat<- factor(case1301.df$Treat,levels=levels(case1301.df$Treat)[c(1,5,6,2,3,4)])
levels(case1301.df$Treat)
a<-8
b<-6
Ca<-rep(0,(a-1))
Cb<-c(1,-1,0,-1,1)
Cmat<- cbind(0,Ca,Cb)
d<-0
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
Cmat<- c(0,Ca,Cb)
d<-0
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
library(lattice)
Cmat<- c(0,Ca,Cb)
d<-0
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
libray(gmodels)
install.packages("gmodels")
libray(gmodels)
library(gmodels)
Cmat<- c(0,Ca,Cb)
d<-0
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
case1301.df<-Sleuth3::case1301
case1301.df$Treat<- factor(case1301.df$Treat,levels=levels(case1301.df$Treat)[c(1,5,6,2,3,4)])
case1301TCR.lm<- lm(log(Cover/(100-Cover)) ~ Block + Treat, data=case1301.df)
#case1301TCR.lm<- update(case1301TC.lm,. ~ . - Block:Treat)
levels(case1301.df$Treat)
a<-8
b<-6
Ca<-rep(0,(a-1))
Cb<-c(1,-1,0,-1,1)
Cmat<- c(0,Ca,Cb)
d<-0
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
estimable(obj=case1301TCR.lm, cm=Cmat, beta0=d, conf.int=0.95)
levels(case1301.df$Treat)
a<-8
b<-6
Ca<-rep(0,(a-1))
Cb<-c(1,-1,0,-1,1)
Cmat<- c(0,Ca,Cb)
d<-0
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
estimable(obj=case1301TCR.lm, cm=Cmat, beta0=d, conf.int=0.95)
Cb<-1/2*c(1,0,-1,1,0)
Cmat<- c(0,Ca,Cb)
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
estimable(obj=case1301TCR.lm, cm=Cmat, beta0=d, conf.int=0.95)
Cb<-1/3*c(-1,-1,1,1,1)
Cmat<- c(0,Ca,Cb)
glh.test(reg=case1301TCR.lm, cm=Cmat, d=d)
estimable(obj=case1301TCR.lm, cm=Cmat, beta0=d, conf.int=0.95)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h', fig.align = 'center', fig.width = 12, fig.height = 10)
library(SemiPar)
library(mgcv)
library(locfit)
data("fossil")
#fit <- gam(strontium.ratio ~ s(age, bs='tp', m=2, k=length(fossil$age)), method='GCV.Cp', data=fossil)
fit <- gam(strontium.ratio ~ s(age, bs='tp', m=2, k=length(fossil$age)), method='GCV.Cp', data=fossil)
summary(fit)
library(SemiPar)
library(mgcv)
library(locfit)
data("fossil")
#fit <- gam(strontium.ratio ~ s(age, bs='tp', m=2, k=length(fossil$age)), method='GCV.Cp', data=fossil)
fit <- gam(strontium.ratio ~ s(age, bs='tp'), method='GCV.Cp', data=fossil)
summary(fit)
attach(fossil)
alpha<- seq(0.05, 0.65, by=.01)
#gcv3 <- gcvplot(strontium.ratio ~ age ,kern="tcub",alpha=alpha,deg=1, ev=dat(cv=FALSE))
gcv3 <- gcvplot(strontium.ratio ~ age ,kern="kern",alpha=alpha,deg=1, ev=dat(cv=FALSE))
plot(gcv3, type="l")
attach(fossil)
alpha<- seq(0.05, 0.65, by=.01)
#gcv3 <- gcvplot(strontium.ratio ~ age ,kern="tcub",alpha=alpha,deg=1, ev=dat(cv=FALSE))
gcv3 <- gcvplot(strontium.ratio ~ age ,kern="expan",alpha=alpha,deg=1, ev=dat(cv=FALSE))
plot(gcv3, type="l")
library(SemiPar)
library(mgcv)
library(locfit)
data("fossil")
#fit <- gam(strontium.ratio ~ s(age, bs='tp', m=2, k=length(fossil$age)), method='GCV.Cp', data=fossil)
fit <- gam(strontium.ratio ~ s(age, bs='tp'), method='GCV.Cp', data=fossil)
summary(fit)
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(gammod,newdata=xgrid, type='link',se.fit=TRUE)
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
#gammod.conf.int<-cbind(gammod.pd$fit)
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
gammod.conf.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*gammod.pd$se.fit,
gammod.pd$fit+qt(0.975,gammod.df)*gammod.pd$se.fit,)
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
gammod.conf.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*gammod.pd$se.fit,
gammod.pd$fit+qt(0.975,gammod.df)*gammod.pd$se.fit)
gammod.pd.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*(deviance(fit)/gammod.df),gammod.pd$fit+qt(0.975,gammod.df))
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
(gammod.conf.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*gammod.pd$se.fit,
gammod.pd$fit+qt(0.975,gammod.df)*gammod.pd$se.fit))
(gammod.pd.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*(deviance(fit)/gammod.df),gammod.pd$fit+qt(0.975,gammod.df)*(deviance(fit)/gammod.df)))
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
(gammod.conf.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*gammod.pd$se.fit,
gammod.pd$fit+qt(0.975,gammod.df)*gammod.pd$se.fit))
(gammod.pd.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*(deviance(fit)/gammod.df),gammod.pd$fit+qt(0.975,gammod.df)*(deviance(fit)/gammod.df)))
plot.gam(gammod, shade=TRUE)
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
(gammod.conf.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*gammod.pd$se.fit,
gammod.pd$fit+qt(0.975,gammod.df)*gammod.pd$se.fit))
(gammod.pd.int<-cbind(gammod.pd$fit-qt(0.975,gammod.df)*(deviance(fit)/gammod.df),gammod.pd$fit+qt(0.975,gammod.df)*(deviance(fit)/gammod.df)))
plot.gam(fit, shade=TRUE)
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
tval<-qt(0.975,gammod.df)
pse<-sqrt(fit$sig2*(1+ diag(fossil$age%*% solve(t(fossil$age) %*% fossil$age)%*% t(fossil$age))))
gammod.conf.int<-cbind(gammod.pd$fit-tval*gammod.pd$se.fit,
gammod.pd$fit+tval*gammod.pd$se.fit)
gammod.pd.int<-cbind(gammod.pd$fit-tval*pse,
gammod.pd$fit+tval*pse)
plot.gam(fit, shade=TRUE)
plot(NA,xlim = c(min(xgrid$age), max(xgrid$age)),ylim = c(0.70710,0.70750))
lines(gammod.conf.int ~ xgrid$age,col = 'red')
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
tval<-qt(0.975,gammod.df)
pse<-sqrt(fit$sig2*(1+ diag(fossil$age%*% solve(t(fossil$age) %*% fossil$age)%*% t(fossil$age))))
gammod.conf.int<-cbind(gammod.pd$fit-tval*gammod.pd$se.fit,
gammod.pd$fit+tval*gammod.pd$se.fit)
gammod.pd.int<-cbind(gammod.pd$fit-tval*pse,
gammod.pd$fit+tval*pse)
plot.gam(fit, shade=TRUE)
plot(NA,xlim = c(min(xgrid$age), max(xgrid$age)),ylim = c(0.70710,0.70750))
lines(gammod.conf.int[,1] ~ xgrid$age,col = 'red')
lines(lower_conf ~ xgrid$age,col = 'red')
xgrid<-data.frame(age=seq(min(fossil$age),max(fossil$age),by=0.2))
gammod.pd<-predict(fit,newdata=xgrid, type='link',se.fit=TRUE)
gammod.df<-df.residual(fit)
tval<-qt(0.975,gammod.df)
pse<-sqrt(fit$sig2*(1+ diag(fossil$age%*% solve(t(fossil$age) %*% fossil$age)%*% t(fossil$age))))
gammod.conf.int<-cbind(gammod.pd$fit-tval*gammod.pd$se.fit,
gammod.pd$fit+tval*gammod.pd$se.fit)
gammod.pd.int<-cbind(gammod.pd$fit-tval*pse,
gammod.pd$fit+tval*pse)
plot.gam(fit, shade=TRUE)
plot(NA,xlim = c(min(xgrid$age), max(xgrid$age)),ylim = c(0.70710,0.70750))
lines(gammod.conf.int[,1] ~ xgrid$age,col = 'red')
lines(gammod.conf.int[,2] ~ xgrid$age,col = 'red')
lines(gammod.pd.int[,1] ~ xgrid$age, col = 'blue')
lines(gammod.pd.int[,2] ~ xgrid$age, col = 'blue')
points(fossil$strontium.ratio ~ fossil$age,pch=16)
lines(gammod.pd$fit ~ xgrid$age,col='orange')
par(mar=c(1,1,1,1))
gammod.conf.int
data(GaltonFamilies, package='HistData')
require(HistData)
data(gala,package='faraway')
head(gala[,-2])
lmod<-lm(Species~Area+Elevation+Nearest+Scruz+Adjacent,data=gala)
summary(lmod)
dim(gala)
summary(lmod)
summary(lmod)$sigma
nullmod<-lm(Species~1,gala)
anova(nullmod, lmod)
summary(lmod)
lmods<-lm(Species~I(Area+Adjacent)+Elevation+Nearest+Scruz,gala)
anova(lmods,lmod)
lmods<-lm(Species~Area+offset(0.5*Adjacent)+Elevation+Nearest+Scruz,gala)
anova(lmods,lmod)
library(rstan,quietly=TRUE)
library(MASS)
data(Theoph)
attach(Theoph)
data <- c("Theoph")
Theoph_new<-Theoph[Theoph$Subject==12,]
Theoph_new <- Theoph_new[-c(1), ]
Theoph_new
OneCompartment.stan <-
"data{
int<lower=1> N;
real<lower=0> y[N]; // Conc
vector<lower=0>[N] x; // Time
real <lower=0> dose;
}
parameters
{
real lnv;
real lnke;
real<lower=0> lnkaminuske;
real<lower=0> sigma; // cv
}
transformed parameters
{
real kaminuske;
real ke;
real ka;
real v;
v=exp(lnv);
ke=exp(lnke);
kaminuske=exp(lnkaminuske);
ka=kaminuske + ke;
}
//replaced with 1-comp pk model, no flip-flop parameterization
model
{
vector[N] mu;;
mu=dose*(ka)/(v*kaminuske)*(exp(-ke*x) - exp(-ka*x));
y ~ normal(mu, sigma*mu);
lnv ~ normal(0, 10); // lnv
lnke ~ normal(0, 10); // lnke
lnkaminuske ~ normal(0, 10); // lnkaminuske
sigma ~ lognormal(0, 10); // sigma
}
generated quantities{
real z;
real muz;
real xhalf;
real xmax;
real mumax;
muz = dose*(kaminuske+ke)/(v*kaminuske)*(exp(-ke*17) - exp(-ka*17));
xhalf = log(2)/ke;
xmax = log((kaminuske + ke)/ke)/kaminuske;
mumax = dose*(kaminuske+ke)/(v*kaminuske)*(exp(-ke*xmax) - exp(-ka*xmax));
z = normal_rng(muz, sigma*muz);
}
"
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
OneCompartment.stanc<- stanc(model_code = OneCompartment.stan)
OneCompartment.stanmod<- stan_model(stanc_ret=OneCompartment.stanc)
x= Theoph_new$Time
invx = Theoph_new$Inv.Time
y= Theoph_new$conc
N= length(y)
dose <- Theoph_new$Dose[1]
OneCompartmentData= list(
N=N,
y=y,
x=x,
dose = dose
)
head(OneCompartmentData)
OneCompartmentData
library(nlme)
subject7.df<- Theoph[Subject==7 & Time > 0.0,]
names(subject7.df)<- c(names(Theoph)[-5],"Conc")
(tmp<- getInitial(Conc ~ SSfol(Dose=Dose, input=Time), data=subject7.df))
detach(Theoph)
require(nlme)
detach(package:nlme)
## Using V = Cl / ke (p. 256):
(lnV<- unname(tmp["lCl"] - tmp["lKe"]))
## Starting value for sigma:
ka<- exp(tmp["lKa"])
ke<- exp(tmp["lKe"])
attach(subject7.df)
mu<- Dose * ka / (ka-ke) * (exp(-ke*Time) - exp(-ka*Time))
##plot(mu ~ Time)
##plot(mu ~ Conc)
## Using BFRM Expr. (6.43):
(n<- length(mu))
p<- 3
(sig2<- sum((Conc - mu)^2 / mu^2) / (n-p))
## Ready for your MLE fit:
(inits<- c("lnV"=lnV,"lnkaminuske"=unname(log(ka-ke)), "lnke"=unname(tmp["lKe"]), "lnsig"=log(sig2)/2))
detach(subject7.df)
set.seed(20500+5150+24601)
funs1<- function(Time,lndose,lnV,lnkaminuske,lnke){
ka<- exp(lnkaminuske) + exp(lnke)
lndose + log(ka) -
lnV - lnkaminuske +
log(exp(-exp(lnke)*Time) - exp(-ka*Time))
}
logMLEpk2 <- nls(log(Conc) ~ funs1(Time,log(Dose),lnV,
lnkaminuske,lnke),
data=subject7.df,
start=list(lnV=-0.61221821,
lnkaminuske=-0.40108553,
lnke=-2.43381942)) ##inits results
summary(logMLEpk2)
funs2<- function(beta,Conc,Time,lndose){
n<- length(Conc)
lnV<- beta[1]
lnkaminuske<- beta[2]
lnke<- beta[3]
lnsig<- beta[4]
ka<- exp(lnkaminuske) + exp(lnke)
ke<- exp(lnke)
lnmu<- lndose + log(ka) - lnV - log(ka-ke) + log(exp(-ke*Time) - exp(-ka*Time))
r <- 2;
lnsdf <- lnsig + r*lnmu/2
ll <- 0
for (i in 1:length(Conc)){
ll <- ll - lnsdf[i] - 0.5*((Conc[i]-exp(lnmu[i]))/exp(lnsdf[i]))^2
}
-ll
}
MLEpk2 <- nlm(f=funs2,p=c(coef(logMLEpk2),log(0.08)),
Conc=Theoph_new$conc, Time=Theoph_new$Time,
lndose=log(Theoph_new$Dose[1]), hessian=TRUE)
beta.inits<- mvtnorm::rmvnorm(n=3, mean=MLEpk2$estimate,
sigma=2*solve(MLEpk2$hessian))
##3 chains
oneCompartmentInits = list(
list(
lnv = beta.inits[1,1],
lnke = beta.inits[1,3],
lnkaMINke = beta.inits[1,2],
sigma = exp(beta.inits[1,4])),
list(
lnv = beta.inits[2,1],
lnke = beta.inits[2,3],
lnkaMINke = beta.inits[2,2],
sigma = exp(beta.inits[2,4])),
list(
lnv = beta.inits[3,1],
lnke = beta.inits[3,3],
lnkaMINke = beta.inits[3,2],
sigma = exp(beta.inits[3,4]))
)
OneCompartment.stanfit<- sampling(
OneCompartment.stanmod,
data = OneCompartmentData,
init = oneCompartmentInits,
chains = 3,
warmup = 1000,
iter = 2000,
seed = 24601,
refresh = 1000)
OneCompartment.mcmc.list<- rstan::As.mcmc.list(OneCompartment.stanfit)
library(coda)
OneCompartment.mcmc.list<- rstan::As.mcmc.list(OneCompartment.stanfit)
coda::varnames(OneCompartment.mcmc.list)
diagnostic.chains <- OneCompartment.mcmc.list[,6:8]
gelman.diag(diagnostic.chains, confidence = 0.95, transform=FALSE,autoburnin=TRUE, multivariate=TRUE)
varnames(OneCompartment.mcmc.list)
coda:::varnames(OneCompartment.mcmc.list)
plot.mcmc.list(diagnostic.chains)
coda:::plot.mcmc.list(diagnostic.chains)
par(mar = c(1,1,1,1))
coda:::plot.mcmc.list(diagnostic.chains)
par(mar = c(1,1,1,1))
plot.mcmc.list(diagnostic.chains)
library(conda)
library(coda)
plot.mcmc.list(diagnostic.chains)
estimates <- coda:::summary.mcmc.list(OneCompartment.mcmc.list,
quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
estimates
nchain(OneCompartment.mcmc.list)
niter(OneCompartment.mcmc.list)
library(pander)
V <- c(OneCompartment.mcmc.list[[1]][,8],OneCompartment.mcmc.list[[2]][,8],
OneCompartment.mcmc.list[[3]][,8])
ka <- c(OneCompartment.mcmc.list[[1]][,7],OneCompartment.mcmc.list[[2]][,7],
OneCompartment.mcmc.list[[3]][,7])
ke <- c(OneCompartment.mcmc.list[[1]][,6],OneCompartment.mcmc.list[[2]][,6],
OneCompartment.mcmc.list[[3]][,6])
xmax <- c(OneCompartment.mcmc.list[[1]][,12],OneCompartment.mcmc.list[[2]][,12],
OneCompartment.mcmc.list[[3]][,12])
muxmax <- c(OneCompartment.mcmc.list[[1]][,13],OneCompartment.mcmc.list[[2]][,13],                OneCompartment.mcmc.list[[3]][,13])
cv <- c(OneCompartment.mcmc.list[[1]][,4],OneCompartment.mcmc.list[[2]][,4],
OneCompartment.mcmc.list[[3]][,4])
temptable <- cbind(c(round(quantile(V,c(0.5,0.05,0.95)),4)),
c(round(quantile(ka,c(0.5,0.05,0.95)),4)),
c(round(quantile(ke,c(0.5,0.05,0.95)),4)),
c(round(quantile(xmax,c(0.5,0.05,0.95)),4)),
c(round(quantile(muxmax,c(0.5,0.05,0.95)),4)),
c(round(quantile(100*cv,c(0.5,0.05,0.95)),4)))
colnames(temptable) <- c("V", "ka", "ke","xmax", "miuxmax","100 * sigma")
pander(temptable, caption = "GLM Bayes")
OneCompartment.mcmc.list
OneCompartment.mcmc.list[[1]]
dim(OneCompartment.mcmc.list[[1]])
colnames(OneCompartment.mcmc.list[[1]])
postmat<- as.matrix(OneCompartment.mcmc.list[,c(4,6:8,12:13)])
par(mfrow=c(2,2))
hist(postmat[,"xmax"], xlab=expression(x[max]), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0, sd=10), add=TRUE)
hist(postmat[,"mumax"], xlab=expression(miu(x[max])), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"ka"], xlab=expression(ka), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"ke"], xlab=expression(ke), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"sigma"], xlab=expression(sqrt(alpha)), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"xmax"], xlab=expression(x[max]), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0, sd=10), add=TRUE)
hist(postmat[,"mumax"], xlab=expression(miu(x[max])), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"ka"], xlab=expression(ka), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
par(mfrow=c(3,2))
hist(postmat[,"xmax"], xlab=expression(x[max]), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0, sd=10), add=TRUE)
hist(postmat[,"mumax"], xlab=expression(miu(x[max])), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"ka"], xlab=expression(ka), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"ke"], xlab=expression(ke), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
hist(postmat[,"sigma"], xlab=expression(sqrt(alpha)), prob=TRUE,
main=NULL)
curve(dnorm(x,mean=0,sd=10), add=TRUE)
colnames(postmat)
x[max]
expression(miu(x[max]))
expression(ke)
q05<- qnorm(0.05, mean=0,sd=10)
arrows(q05, 0, 3, 0, code=3, length=0.05,angle=90)
text(1,0.5,labels=expression(x[max]), adj=0)
beta<- as.matrix(OneCompartment.mcmc.list[,5:8])
mux<- function(dose,ka,v,kaminuske,ke,x) dose*(ka)/(v*kaminuske)*(exp(-ke*x)-   exp(-ka *x))
plot(0:30, type="n", ylim=c(0,12), xlim=c(0,30),
xlab="Time", ylab="Conc")
##Plot1 posterior samples of mean curve mu(x):
invisible(res<-apply(beta, 1, FUN=function(dose,ka,v,kaminuske,ke,x,mu)
{curve(mux(dose,ka,v,kaminuske,ke,x),add=TRUE,col="yellow", lty=3)},
mu=mux))
beta<- as.matrix(OneCompartment.mcmc.list[,5:8])
mux<- function(dose,ka,v,kaminuske,ke,x) dose*(ka)/(v*kaminuske)*(exp(-ke*x)-   exp(-ka *x))
plot(0:30, type="n", ylim=c(0,12), xlim=c(0,30),
xlab="Time", ylab="Conc")
invisible(res<-apply(beta, 1, FUN=function(dose,ka,v,kaminuske,ke,x,mu)
{curve(mux(dose,ka,v,kaminuske,ke,x),add=TRUE,col="yellow", lty=3)},
mu=mux))
FUN=function(dose,ka,v,kaminuske,ke,x,mu)
{curve(mux(dose,ka,v,kaminuske,ke,x),add=TRUE,col="yellow", lty=3)}
beta
dim(beta)
colnames(OneCompartment.mcmc.list)
colnames(OneCompartment.mcmc)
a=OneCompartment.mcmc.list[,c(4,6:8,12:13)]
colnames(a)
a
a=OneCompartment.mcmc.list[,'dose']
a=OneCompartment.mcmc.list[,c(4,6:8,12:13)]
a[,'mu']
a
View(nullmod)
View(OneCompartment.stanfit)
View(OneCompartment.stanmod)
View(OneCompartmentData)
View(oneCompartmentInits)
View(OneCompartment.stanc)
colnames(postmat)
as.matrix(OneCompartment.mcmc.list)
a<-as.matrix(OneCompartment.mcmc.list)
colnames(a)
Dose
mu
Dose
mu<- Dose * ka / (ka-ke) * (exp(-ke*Time) - exp(-ka*Time))
data(Theoph)
attach(Theoph)
mu<- Dose * ka / (ka-ke) * (exp(-ke*Time) - exp(-ka*Time))
Dose
length(Dose)
dim(a)
colnames(a)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages(gridExtra)
install.packages("ggplot2")
library(ggplot2)
library(gridExtra)
install.packages("survival")
install.packages("rstan")
library(ggplot2)
library(gridExtra)
source('~/Documents/Work/Training2020/Unit6/Practice_U6/Code/FigurePlot.R')
source('~/Documents/Work/Training2020/Unit6/Practice_U6/Code/FigurePlot.R')
source('~/Documents/Work/Training2020/Unit6/Practice_U6/Code/FigurePlot.R')
